logging:
  level:
    com.study: info

spring:
  application:
    name: shardingSphere-sharding-algorithm

  shardingsphere:
    # 将运行模式配置为Standalone单机模式（Cluster：集群模式）
    mode:
      type: Standalone
      repository:
        type: JDBC
    props:
      # 日志显示具体的SQL
      sql-show: true
    # 配置多个数据源
    datasource:
      #      真实数据源名称
      names: ds0,ds1
      #      druid数据库连接池配置
      common: &common
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        time-between-eviction-runs-millis: 60000
        min-evictable-idle-time-millis: 300000
        max-active: 500
        initial-size: 3
        min-idle: 3
        max-wait: 60000
        remove-abandoned: true
        remove-abandoned-timeout: 300
        log-abandoned: true
      # 配置第一个数据源
      ds0:
        #        引用common配置
        <<: *common
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/db_sharding_01?useUnicode=true&useSSL=false&characterEncoding=utf8
        username: root
        password: 123456

      # 配置第二个数据源
      ds1:
        # 引用common配置
        <<: *common
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/db_sharding_02?useUnicode=true&useSSL=false&characterEncoding=utf8
        username: root
        password: 123456

    rules:
      sharding:
        tables:
          shoping:
            actual-data-nodes: ds$->{0..1}.shoping_0$->{0..1}
            database-strategy:
              standard:
                sharding-column: shoping_id
                sharding-algorithm-name: class-based-standard
            table-strategy:
              standard:
                sharding-column: shoping_id
                sharding-algorithm-name: class-based-standard
            key-generate-strategy:
              # 声明主键为shoping_id
              column: shoping_id
              # 同样指向global-id-snowflake这个具体的主键生成策略
              key-generator-name: global-id-snowflake
          volume_range:
            actual-data-nodes: ds0.volume_range_$->{0..3}
            key-generate-strategy:
              column: order_id
              # 同样指向global-id-snowflake这个具体的主键生成策略
              key-generator-name: global-id-snowflake
            table-strategy:
              complex:
                sharding-columns: order_id,user_id
                sharding-algorithm-name: class-based-complex
          boundary_range:
            actual-data-nodes: ds0.boundary_range$->{0..3}
            key-generate-strategy:
              column: order_id
              # 同样指向global-id-snowflake这个具体的主键生成策略
              key-generator-name: global-id-snowflake
            table-strategy:
              hint:
                sharding-algorithm-name: class-based-hint

        sharding-algorithms:
          # 自定义标准分片算法
          class-based-standard:
            type: CLASS_BASED
            props:
              strategy: STANDARD
              algorithmClassName: com.study.config.classbased.CustomStandardShardingAlgorithm
          class-based-complex:
            # 自定义复合分片算法
            type: CLASS_BASED
            props:
              strategy: COMPLEX
              algorithmClassName: com.study.config.classbased.CustomComplexKeysShardingAlgorithm
          class-based-hint:
            type: CLASS_BASED
            props:
              strategy: HINT
              algorithmClassName: com.study.config.classbased.CustomHintShardingAlgorithm

        key-generators:
          global-id-snowflake:
            type: SNOWFLAKE
            props:
              # 分配一个工作节点ID（要确保全局唯一）
              worker-id: 110



# mybatis-plus 配置内容
mybatis-plus:
  configuration:
    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。
  #    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl #开启sql日志
  global-config:
    db-config:
      id-type: none # 虽然 MyBatis Plus 也提供 ID 生成策略，但是还是使用 Sharding-JDBC 的
      logic-delete-value: 1 # 逻辑已删除值(默认为 1)
      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)
  mapper-locations: classpath*:mapper/*.xml